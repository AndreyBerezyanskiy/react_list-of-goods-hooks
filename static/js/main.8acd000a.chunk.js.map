{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","changeReverse","NONE","sortType","changeSortType","isResetRenderButton","goodsForRender","goods","visibleGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","cn","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAmCF,mBAASH,EAASM,MAArD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAAsBL,GAAcG,IAAaP,EAASM,KAO1DI,EAvCD,SACLC,EADK,GAGJ,IADCJ,EACF,EADEA,SAAUH,EACZ,EADYA,WAGNQ,EAAY,YAAOD,GAoBzB,OAlBAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQR,GACN,KAAKP,EAASgB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,KAAKnB,EAASM,KACd,QACE,OAAO,MAITF,GACFQ,EAAaQ,UAGRR,EAcgBS,CACrBpB,EACA,CAAEM,WAAUH,eAGd,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYjB,IAAaP,EAASgB,WAEtCS,QAAS,kBAAMjB,EAAeR,EAASgB,WANzC,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYjB,IAAaP,EAASkB,SAEtCO,QAAS,kBAAMjB,EAAeR,EAASkB,SANzC,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAapB,IAEjBqB,QAAS,kBACPpB,GAAc,SAACqB,GAAD,OAAcA,MAPhC,qBAYCjB,GACC,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAnDS,WACjBpB,GAAc,GACdG,EAAeR,EAASM,OA8ClB,sBAUJ,6BACE,6BACGI,EAAeiB,KAAI,SAAAC,GAAI,OACtB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cCzHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8acd000a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      case SortType.NONE:\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, changeReverse] = useState(false);\n  const [sortType, changeSortType] = useState(SortType.NONE);\n\n  const isResetRenderButton = isReversed || sortType !== SortType.NONE;\n\n  const resetOrder = () => {\n    changeReverse(false);\n    changeSortType(SortType.NONE);\n  };\n\n  const goodsForRender = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => changeSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => changeSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => (\n            changeReverse((current) => !current))}\n        >\n          Reverse\n        </button>\n\n        {isResetRenderButton && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetOrder}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goodsForRender.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}